

---------------------------------------------------------------------Base de datos Actualizada ---------------------------------------------------------------------------------------------

-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema comercio
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema comercio
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `comercio` DEFAULT CHARACTER SET utf8mb3 ;
USE `comercio` ;

-- -----------------------------------------------------
-- Table `comercio`.`tipos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `comercio`.`tipos` (
  `tipo_id` VARCHAR(255) NOT NULL,
  `descripcion` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`tipo_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `comercio`.`clientes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `comercio`.`clientes` (
  `id_cliente` VARCHAR(255) NOT NULL,
  `tipo_id` VARCHAR(255) NOT NULL,
  `nombres` VARCHAR(255) NULL DEFAULT NULL,
  `apellidos` VARCHAR(255) NULL DEFAULT NULL,
  `fecha_nacimiento` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`id_cliente`, `tipo_id`),
  INDEX `fk_clientes_tipos_idx` (`tipo_id` ASC) VISIBLE,
  CONSTRAINT `fk_clientes_tipos`
    FOREIGN KEY (`tipo_id`)
    REFERENCES `comercio`.`tipos` (`tipo_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `comercio`.`medios_pago`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `comercio`.`medios_pago` (
  `id_medios_pago` VARCHAR(255) NOT NULL,
  `descripcion` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`id_medios_pago`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `comercio`.`facturas_venta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `comercio`.`facturas_venta` (
  `id_factura` INT NOT NULL AUTO_INCREMENT,
  `id_cliente` VARCHAR(255) NOT NULL,
  `tipo_id_cliente` VARCHAR(255) NOT NULL,
  `id_medios_pago` VARCHAR(255) NULL DEFAULT NULL,
  `valor` INT NULL DEFAULT NULL,
  `fecha` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`id_factura`),
  INDEX `fk_facturas_venta_medios_pago_idx` (`id_medios_pago` ASC) VISIBLE,
  INDEX `fk_facturas_venta_clientes_idx` (`id_cliente` ASC, `tipo_id_cliente` ASC) VISIBLE,
  CONSTRAINT `fk_facturas_venta_clientes`
    FOREIGN KEY (`id_cliente` , `tipo_id_cliente`)
    REFERENCES `comercio`.`clientes` (`id_cliente` , `tipo_id`),
  CONSTRAINT `fk_facturas_venta_medios_pago`
    FOREIGN KEY (`id_medios_pago`)
    REFERENCES `comercio`.`medios_pago` (`id_medios_pago`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `comercio`.`unidad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `comercio`.`unidad` (
  `id_unidad` INT NOT NULL,
  `descripcion` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`id_unidad`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `comercio`.`insumos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `comercio`.`insumos` (
  `id_insumo` VARCHAR(255) NOT NULL,
  `tipo` VARCHAR(255) NULL DEFAULT NULL,
  `nombre` VARCHAR(255) NULL DEFAULT NULL,
  `costo` INT NULL DEFAULT NULL,
  `id_unidad` INT NOT NULL,
  PRIMARY KEY (`id_insumo`),
  INDEX `fk_insumos_unidad_idx` (`id_unidad` ASC) VISIBLE,
  CONSTRAINT `fk_insumos_unidad`
    FOREIGN KEY (`id_unidad`)
    REFERENCES `comercio`.`unidad` (`id_unidad`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `comercio`.`productos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `comercio`.`productos` (
  `id_producto` VARCHAR(255) NOT NULL,
  `tipo` VARCHAR(255) NULL DEFAULT NULL,
  `nombre` VARCHAR(255) NULL DEFAULT NULL,
  `precio` INT NULL DEFAULT NULL,
  `descripcion` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`id_producto`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `comercio`.`pedidos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `comercio`.`pedidos` (
  `id_factura` INT NOT NULL,
  `id_producto` VARCHAR(255) NOT NULL,
  `fecha` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`id_factura`, `id_producto`),
  INDEX `fk_pedidos_facturas_venta_idx` (`id_factura` ASC) VISIBLE,
  INDEX `fk_pedidos_productos_idx` (`id_producto` ASC) VISIBLE,
  CONSTRAINT `fk_pedidos_facturas_venta`
    FOREIGN KEY (`id_factura`)
    REFERENCES `comercio`.`facturas_venta` (`id_factura`),
  CONSTRAINT `fk_pedidos_productos`
    FOREIGN KEY (`id_producto`)
    REFERENCES `comercio`.`productos` (`id_producto`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `comercio`.`proveedores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `comercio`.`proveedores` (
  `id_proveedor` VARCHAR(255) NOT NULL,
  `tipo_id` VARCHAR(255) NOT NULL,
  `nombre` VARCHAR(255) NULL DEFAULT NULL,
  `direccion` VARCHAR(255) NULL DEFAULT NULL,
  `telefono` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`id_proveedor`),
  INDEX `fk_proveedores_tipos_idx` (`tipo_id` ASC) VISIBLE,
  CONSTRAINT `fk_proveedores_tipos`
    FOREIGN KEY (`tipo_id`)
    REFERENCES `comercio`.`tipos` (`tipo_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `comercio`.`recetas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `comercio`.`recetas` (
  `id_insumo` VARCHAR(255) NOT NULL,
  `id_producto` VARCHAR(255) NOT NULL,
  `cantidad` SMALLINT NULL DEFAULT NULL,
  PRIMARY KEY (`id_insumo`, `id_producto`),
  INDEX `fk_recetas_productos_idx` (`id_producto` ASC) VISIBLE,
  INDEX `fk_recetas_insumos_idx` (`id_insumo` ASC) VISIBLE,
  CONSTRAINT `fk_recetas_insumos`
    FOREIGN KEY (`id_insumo`)
    REFERENCES `comercio`.`insumos` (`id_insumo`),
  CONSTRAINT `fk_recetas_productos`
    FOREIGN KEY (`id_producto`)
    REFERENCES `comercio`.`productos` (`id_producto`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

------------------------------------------------------------------------------------------Inserts--------------------------------------------------------------------------------------------

-- Insertar datos en la tabla `tipos`
INSERT INTO `comercio`.`tipos` (tipo_id, descripcion) VALUES
 ('CC', 'Cédula de Ciudadanía'),
 ('TI', 'Tarjeta de Identidad'),
 ('NIT', 'Número de Identificación Tributaria'),
 ('CE', 'Cédula de Extrangería'),
 ('PP', 'Pasaporte');

-- Insertar datos en la tabla `clientes`
INSERT INTO `comercio`.`clientes` (id_cliente, tipo_id, nombres, apellidos, fecha_nacimiento) VALUES 
 ('C001', 'CC', 'Juan', 'Pérez', '1980-01-01'), 
 ('C002', 'CC', 'María', 'Gómez', '1985-02-15'), 
 ('C003', 'CC', 'Carlos', 'Rodríguez', '1990-03-10'), 
 ('C004', 'TI', 'Ana', 'Martínez', '2000-04-20'), 
 ('C005', 'TI', 'Luis', 'Fernández', '1995-05-25'),
 ('C006', 'CC', 'Jorge', 'López', '1982-06-30'), 
 ('C007', 'CC', 'Pedro', 'Díaz', '1975-07-10'), 
 ('C008', 'CC', 'Laura', 'Hernández', '1992-08-08'),
 ('C009', 'CC', 'Marta', 'Jiménez', '1988-09-12'),
 ('C010', 'TI', 'Sofía', 'García', '1999-10-05');

-- Insertar datos en la tabla `proveedores`
INSERT INTO `comercio`.`proveedores` (id_proveedor, tipo_id, nombre, direccion, telefono) VALUES 
 ('P001', 'NIT', 'Proveedor A', 'Calle 1 #10-20', '3101234567'), 
 ('P002', 'NIT', 'Proveedor B', 'Calle 2 #20-30', '3111234567'), 
 ('P003', 'NIT', 'Proveedor C', 'Calle 3 #30-40', '3121234567'), 
 ('P004', 'NIT', 'Proveedor D', 'Calle 4 #40-50', '3131234567'), 
 ('P005', 'NIT', 'Proveedor E', 'Calle 5 #50-60', '3141234567'), 
 ('P006', 'NIT', 'Proveedor F', 'Calle 6 #60-70', '3151234567'), 
 ('P007', 'NIT', 'Proveedor G', 'Calle 7 #70-80', '3161234567'), 
 ('P008', 'NIT', 'Proveedor H', 'Calle 8 #80-90', '3171234567'), 
 ('P009', 'NIT', 'Proveedor I', 'Calle 9 #90-100', '3181234567'), 
 ('P010', 'NIT', 'Proveedor J', 'Calle 10 #100-110', '3191234567');

-- Insertar datos en la tabla `unidad`
INSERT INTO `comercio`.`unidad` (id_unidad, descripcion) VALUES
 (1, 'Kilogramo'),
 (2, 'Litro'),
 (3, 'Unidad');

-- Insertar datos en la tabla `insumos`
INSERT INTO `comercio`.`insumos` (id_insumo, tipo, nombre, costo, id_unidad) VALUES
 ('I001', 'Materia Prima', 'Harina', 1500, 1),
 ('I002', 'Materia Prima', 'Azúcar', 1000, 1),
 ('I003', 'Materia Prima', 'Leche', 3000, 2),
 ('I004', 'Materia Prima', 'Huevos', 500, 3),
 ('I005', 'Materia Prima', 'Mantequilla', 2500, 1),
 ('I006', 'Materia Prima', 'Sal', 800, 1),
 ('I007', 'Materia Prima', 'Café', 2000, 1),
 ('I008', 'Materia Prima', 'Chocolate', 2500, 1),
 ('I009', 'Materia Prima', 'Agua', 500, 2),
 ('I010', 'Materia Prima', 'Levadura', 1200, 1);

-- Insertar datos en la tabla `productos`
INSERT INTO `comercio`.`productos` (id_producto, tipo, nombre, precio, descripcion) VALUES
 ('P001', 'Producto Terminado', 'Pan de Chocolate', 10000, 'Pan hecho con chocolate'),
 ('P002', 'Producto Terminado', 'Torta de Vainilla', 15000, 'Torta hecha con esencia de vainilla'),
 ('P003', 'Producto Terminado', 'Croissant', 5000, 'Croissant de mantequilla'),
 ('P004', 'Producto Terminado', 'Galletas', 7000, 'Galletas de avena'),
 ('P005', 'Producto Terminado', 'Café', 3000, 'Taza de café negro'),
 ('P006', 'Producto Terminado', 'Capuchino', 4000, 'Café con leche y espuma'),
 ('P007', 'Producto Terminado', 'Sandwich', 8000, 'Sandwich de jamón y queso'),
 ('P008', 'Producto Terminado', 'Empanada', 3000, 'Empanada de carne'),
 ('P009', 'Producto Terminado', 'Jugos', 2000, 'Jugo natural de frutas'),
 ('P010', 'Producto Terminado', 'Té', 2500, 'Té negro');

-- Insertar datos en la tabla `recetas`
INSERT INTO `comercio`.`recetas` (id_insumo, id_producto, cantidad) VALUES
 ('I001', 'P001', 2),
 ('I002', 'P001', 1),
 ('I008', 'P001', 1),
 ('I005', 'P003', 2),
 ('I004', 'P003', 2),
 ('I003', 'P006', 1),
 ('I009', 'P006', 1),
 ('I010', 'P006', 1),
 ('I007', 'P005', 1),
 ('I009', 'P005', 1);

-- Insertar datos en la tabla `medios_pago`
INSERT INTO `comercio`.`medios_pago` (id_medios_pago, descripcion) VALUES
 ('MP1', 'Efectivo'),
 ('MP2', 'Tarjeta de Crédito'),
 ('MP3', 'Transferencia Bancaria');

----------------------------------------------------------------------------------------- PREGUNTAS  -------------------------------------------------------------------------------------

1.
Crear un procedimiento almacenado que permita crear una nueva receta, validando previamente que los insumos de la receta si existan dentro de la tabla insumos, de no existir deberá crear primero los insumos en la tabla insumos para previamente crear la receta. Nota: Debemos crear por lo menos 20 recetas nuevas con 40 insumos diferentes.

DELIMITER //

CREATE PROCEDURE CrearReceta (
    IN idProducto VARCHAR(255),
    IN nombreProducto VARCHAR(255),
    IN tipoProducto VARCHAR(255),
    IN precioProducto INT,
    IN descripcionProducto VARCHAR(255),
    IN idInsumo1 VARCHAR(255), IN nombreInsumo1 VARCHAR(255), IN tipoInsumo1 VARCHAR(255), IN costo1 INT, IN idUnidad1 INT, IN cantidad1 SMALLINT,
    IN idInsumo2 VARCHAR(255), IN nombreInsumo2 VARCHAR(255), IN tipoInsumo2 VARCHAR(255), IN costo2 INT, IN idUnidad2 INT, IN cantidad2 SMALLINT
)
BEGIN

    IF NOT EXISTS (SELECT 1 FROM productos WHERE id_producto = idProducto) THEN
        -- Insertar el nuevo producto en la tabla 'productos'
        INSERT INTO productos (id_producto, tipo, nombre, precio, descripcion)
        VALUES (idProducto, tipoProducto, nombreProducto, precioProducto, descripcionProducto);
    END IF;
    
    -- insumo 1 verificación
    IF NOT EXISTS (SELECT 1 FROM insumos WHERE id_insumo = idInsumo1) THEN
        -- Insertar el nuevo insumo en la tabla 'insumos'
        INSERT INTO insumos (id_insumo, tipo, nombre, costo, id_unidad)
        VALUES (idInsumo1, tipoInsumo1, nombreInsumo1, costo1, idUnidad1);
    END IF;

     -- Insumo 2 verificación
     
    IF NOT EXISTS (SELECT 1 FROM insumos WHERE id_insumo = idInsumo2) THEN
        -- Insertar el nuevo insumo en la tabla 'insumos'
        INSERT INTO insumos (id_insumo, tipo, nombre, costo, id_unidad)
        VALUES (idInsumo2, tipoInsumo2, nombreInsumo2, costo2, idUnidad2);
    END IF;
    
    -- Insertar la receta
    INSERT INTO recetas (id_insumo, id_producto, cantidad) VALUES (idInsumo1, idProducto, cantidad1);
    INSERT INTO recetas (id_insumo, id_producto, cantidad) VALUES (idInsumo2, idProducto, cantidad2);

END //

DELIMITER ;



------------- EJEMPLO-------------
En este primer llamado al procedimiento le estamos entregando dos insumos que no existen como se puede ver si hacemos un select:
mysql> select * from insumos;
+-----------+---------------+-------------+-------+-----------+
| id_insumo | tipo          | nombre      | costo | id_unidad |
+-----------+---------------+-------------+-------+-----------+
| I001      | Materia Prima | Harina      |  1500 |         1 |
| I002      | Materia Prima | Azúcar      |  1000 |         1 |
| I003      | Materia Prima | Leche       |  3000 |         2 |
| I004      | Materia Prima | Huevos      |   500 |         3 |
| I005      | Materia Prima | Mantequilla |  2500 |         1 |
| I006      | Materia Prima | Sal         |   800 |         1 |
| I007      | Materia Prima | Café        |  2000 |         1 |
| I008      | Materia Prima | Chocolate   |  2500 |         1 |
| I009      | Materia Prima | Agua        |   500 |         2 |
| I010      | Materia Prima | Levadura    |  1200 |         1 |
+-----------+---------------+-------------+-------+-----------+
10 rows in set (0,00 sec)

CALL CrearReceta(
    'P011', 'Pan', 'Producto Terminado', 12000, 'Pan hecho con harina integral',
    'I014', 'avena', 'Materia Prima', 1600, 1, 3,
    'I015', 'agua', 'Materia Prima', 1000, 1, 2
);

si hacemos ahora select de la tabla productos, vemos la integración del pan integral

mysql> select * from productos; 
+-------------+--------------------+-------------------+--------+-------------------------------------+
| id_producto | tipo               | nombre            | precio | descripcion                         |
+-------------+--------------------+-------------------+--------+-------------------------------------+
| P001        | Producto Terminado | Pan de Chocolate  |  10000 | Pan hecho con chocolate             |
| P002        | Producto Terminado | Torta de Vainilla |  15000 | Torta hecha con esencia de vainilla |
| P003        | Producto Terminado | Croissant         |   5000 | Croissant de mantequilla            |
| P004        | Producto Terminado | Galletas          |   7000 | Galletas de avena                   |
| P005        | Producto Terminado | Café              |   3000 | Taza de café negro                  |
| P006        | Producto Terminado | Capuchino         |   4000 | Café con leche y espuma             |
| P007        | Producto Terminado | Sandwich          |   8000 | Sandwich de jamón y queso           |
| P008        | Producto Terminado | Empanada          |   3000 | Empanada de carne                   |
| P009        | Producto Terminado | Jugos             |   2000 | Jugo natural de frutas              |
| P010        | Producto Terminado | Té                |   2500 | Té negro                            |
| P011        | Producto Terminado | Pan Integral      |  12000 | Pan hecho con harina integral       |
+-------------+--------------------+-------------------+--------+-------------------------------------+
11 rows in set (0,00 sec)

y como se añaden los insumos:

mysql> select * from insumos; 
+-----------+---------------+---------------------+-------+-----------+
| id_insumo | tipo          | nombre              | costo | id_unidad |
+-----------+---------------+---------------------+-------+-----------+
| I001      | Materia Prima | Harina              |  1500 |         1 |
| I002      | Materia Prima | Azúcar              |  1000 |         1 |
| I003      | Materia Prima | Leche               |  3000 |         2 |
| I004      | Materia Prima | Huevos              |   500 |         3 |
| I005      | Materia Prima | Mantequilla         |  2500 |         1 |
| I006      | Materia Prima | Sal                 |   800 |         1 |
| I007      | Materia Prima | Café                |  2000 |         1 |
| I008      | Materia Prima | Chocolate           |  2500 |         1 |
| I009      | Materia Prima | Agua                |   500 |         2 |
| I010      | Materia Prima | Levadura            |  1200 |         1 |
| I011      | Materia Prima | Harina Integral     |  1600 |         1 |
| I012      | Materia Prima | Semillas de Amapola |  1000 |         1 |
+-----------+---------------+---------------------+-------+-----------+
12 rows in set (0,00 sec)

Ahora un ejemplo donde utilice un insumo que ya existe:

mysql> CALL CrearReceta(
    ->     'P012', 'Pan de Centeno', 'Producto Terminado', 13000, 'Pan hecho con harina de centeno',
    ->     'I001', 'Harina', 'Materia Prima', 1500, 1, 2, -- Insumo ya existente
    ->     'I013', 'Harina de Centeno', 'Materia Prima', 1800, 1, 3 -- Nuevo insumo
    -> );
Query OK, 1 row affected (0,07 sec)

mysql> select * from insumos; 
+-----------+---------------+---------------------+-------+-----------+
| id_insumo | tipo          | nombre              | costo | id_unidad |
+-----------+---------------+---------------------+-------+-----------+
| I001      | Materia Prima | Harina              |  1500 |         1 |
| I002      | Materia Prima | Azúcar              |  1000 |         1 |
| I003      | Materia Prima | Leche               |  3000 |         2 |
| I004      | Materia Prima | Huevos              |   500 |         3 |
| I005      | Materia Prima | Mantequilla         |  2500 |         1 |
| I006      | Materia Prima | Sal                 |   800 |         1 |
| I007      | Materia Prima | Café                |  2000 |         1 |
| I008      | Materia Prima | Chocolate           |  2500 |         1 |
| I009      | Materia Prima | Agua                |   500 |         2 |
| I010      | Materia Prima | Levadura            |  1200 |         1 |
| I011      | Materia Prima | Harina Integral     |  1600 |         1 |
| I012      | Materia Prima | Semillas de Amapola |  1000 |         1 |
| I013      | Materia Prima | Harina de Centeno   |  1800 |         1 |
+-----------+---------------+---------------------+-------+-----------+
13 rows in set (0,00 sec)

Vemos la relación, el ultimo producto el "Pan de centeno" se hace con el insumo I001 y el I013 como muestra la tabla que los relaciona

mysql> select * from recetas; 
+-----------+-------------+----------+
| id_insumo | id_producto | cantidad |
+-----------+-------------+----------+
| I001      | P001        |        2 |
| I001      | P012        |        2 |
| I002      | P001        |        1 |
| I003      | P006        |        1 |
| I004      | P003        |        2 |
| I005      | P003        |        2 |
| I007      | P005        |        1 |
| I008      | P001        |        1 |
| I009      | P005        |        1 |
| I009      | P006        |        1 |
| I010      | P006        |        1 |
| I011      | P011        |        3 |
| I012      | P011        |        2 |
| I013      | P012        |        3 |
+-----------+-------------+----------+
14 rows in set (0,00 sec)


2.
Crear un procedimiento almacenado que permita actualizar una receta ya existente, Nota: Importante aplique para estos procedimientos control de concurrencia por bloqueos.

DELIMITER $$

CREATE PROCEDURE ActualizarReceta(
    IN p_id_producto VARCHAR(255),
    IN p_id_insumo VARCHAR(255),
    IN p_cantidad SMALLINT,
    IN p_nuevo_id_insumo VARCHAR(255),
    IN p_nueva_cantidad SMALLINT
)
BEGIN
    DECLARE insumo_existente BOOLEAN;

    START TRANSACTION;

    SELECT 1
    INTO insumo_existente
    FROM recetas
    WHERE id_producto = p_id_producto AND id_insumo = p_id_insumo
    FOR UPDATE;

    IF insumo_existente THEN
        UPDATE recetas
        SET cantidad = p_cantidad
        WHERE id_producto = p_id_producto AND id_insumo = p_id_insumo;

        INSERT INTO recetas (id_insumo, id_producto, cantidad)
        VALUES (p_nuevo_id_insumo, p_id_producto, p_nueva_cantidad)
        ON DUPLICATE KEY UPDATE
            cantidad = VALUES(cantidad); 

    ELSE
        SET MESSAGE_TEXT = 'No existe la receta.';
    END IF;

    COMMIT;
END$$

DELIMITER ;

---------EJEMPLO-----------------
Supongamos que se tiene una receta para el producto P001 (Pan de Chocolate)
y se quiere actualizar el insumo I001 (Harina) a una nueva cantidad de 3 kilogramos, 
además de agregar un nuevo insumo, I012 (Esencia de vainilla) con una cantidad de 1.

Para el pan de chocolate:
+-------------+--------------------+-------------------+--------+-------------------------------------+
| id_producto | tipo               | nombre            | precio | descripcion                         |
+-------------+--------------------+-------------------+--------+-------------------------------------+
| P001        | Producto Terminado | Pan de Chocolate  |  10000 | Pan hecho con chocolate             |

Se necesitan 3 cosas, Hariana (I001), Azúcar (I002) y chocolate (I008)

mysql> select * from recetas; 
+-----------+-------------+----------+
| id_insumo | id_producto | cantidad |
+-----------+-------------+----------+
| I001      | P001        |        2 |
| I002      | P001        |        1 |
| I008      | P001        |        1 |

vemos que la cantidad de hariana que se necesita es 2
	CALL ActualizarReceta('P001', 'I001', 3, 'I012', 1);

la tabla cambia:

mysql> select * from recetas; 
+-----------+-------------+----------+
| id_insumo | id_producto | cantidad |
+-----------+-------------+----------+
| I001      | P001        |        3 |  <!----
| I001      | P012        |        2 |
| I002      | P001        |        1 |
| I003      | P006        |        1 |
| I004      | P003        |        2 |
| I005      | P003        |        2 |
| I007      | P005        |        1 |
| I008      | P001        |        1 |
| I009      | P005        |        1 |
| I009      | P006        |        1 |
| I010      | P006        |        1 |
| I011      | P011        |        3 |
| I012      | P001        |        1 |
| I012      | P011        |        2 |
| I013      | P012        |        3 |
+-----------+-------------+----------+
15 rows in set (0,00 sec)

3.
Cree un procedimiento almacenado que permita actualizar los id_productos de la tabla pedidos, en el cual trabaje su sesión con un nivel de aislamiento READ_UNCOMMITED, para que permita la presencia de la lectura sucia sobre la tabla y analice los resultados simulando la ejecución en paralelo de este procedimiento y en una tercera sesión realice una consulta full de la tabla. Nota: La tabla pedidos debe tener como mínimo 40 pedidos simulados.

Primero inserto las 40 facturas para luego generar los pedidos simulados:
-- Insertar 40 facturas en la tabla facturas_venta
INSERT INTO facturas_venta (id_cliente, tipo_id_cliente, id_medios_pago, valor, fecha)
VALUES 
('C99997', 'TI', 'MP2', 60000, '2024-09-06'),
('C99998', 'CC', 'MP3', 65000, '2024-09-06'),
('C99999', 'TI', 'MP1', 70000, '2024-09-07'),
('C99987', 'CC', 'MP2', 75000, '2024-09-07'),
('C99988', 'TI', 'MP3', 80000, '2024-09-08'),
('C99989', 'CC', 'MP1', 85000, '2024-09-08'),
('C99990', 'TI', 'MP2', 90000, '2024-09-09'),
('C99991', 'CC', 'MP3', 95000, '2024-09-09'),
('C99992', 'TI', 'MP1', 100000, '2024-09-10'),
('C99993', 'CC', 'MP2', 105000, '2024-09-10'),
('C99994', 'TI', 'MP3', 110000, '2024-09-11'),
('C99995', 'CC', 'MP1', 115000, '2024-09-11'),
('C99996', 'TI', 'MP2', 120000, '2024-09-12'),
('C99997', 'CC', 'MP3', 125000, '2024-09-12'),
('C99998', 'TI', 'MP1', 130000, '2024-09-13'),
('C99999', 'CC', 'MP2', 135000, '2024-09-13'),
('C99987', 'TI', 'MP3', 140000, '2024-09-14'),
('C99988', 'CC', 'MP1', 145000, '2024-09-14'),
('C99989', 'TI', 'MP2', 150000, '2024-09-15'),
('C99990', 'CC', 'MP3', 155000, '2024-09-15'),
('C99991', 'TI', 'MP1', 160000, '2024-09-16'),
('C99992', 'CC', 'MP2', 165000, '2024-09-16'),
('C99993', 'TI', 'MP3', 170000, '2024-09-17'),
('C99994', 'CC', 'MP1', 175000, '2024-09-17'),
('C99995', 'TI', 'MP2', 180000, '2024-09-18'),
('C99996', 'CC', 'MP3', 185000, '2024-09-18'),
('C99997', 'TI', 'MP1', 190000, '2024-09-19'),
('C99998', 'CC', 'MP2', 195000, '2024-09-19'),
('C99999', 'TI', 'MP3', 200000, '2024-09-20');

Ahora los pedidos: 

INSERT INTO pedidos (id_factura, id_producto, fecha)
VALUES
(41,  'P001', '2024-09-01'),
(42,  'P002', '2024-09-01'),
(43,  'P003', '2024-09-02'),
(44,  'P004', '2024-09-02'),
(45,  'P005', '2024-09-03'),
(46,  'P006', '2024-09-03'),
(47,  'P007', '2024-09-04'),
(48,  'P008', '2024-09-04'),
(49,  'P009', '2024-09-05'),
(50,  'P010', '2024-09-05'),
(119, 'P001', '2024-09-01'),
(120, 'P002', '2024-09-01'),
(121, 'P003', '2024-09-02'),
(122, 'P004', '2024-09-02'),
(123, 'P005', '2024-09-03'),
(124, 'P006', '2024-09-03'),
(125, 'P007', '2024-09-04'),
(126, 'P008', '2024-09-04'),
(127, 'P009', '2024-09-05'),
(128, 'P010', '2024-09-05'),
(129, 'P001', '2024-09-01'),
(130, 'P002', '2024-09-01'),
(131, 'P003', '2024-09-02'),
(132, 'P004', '2024-09-02'),
(133, 'P005', '2024-09-03'),
(134, 'P006', '2024-09-03'),
(135, 'P007', '2024-09-04'),
(136, 'P008', '2024-09-04'),
(137, 'P009', '2024-09-05'),
(138, 'P010', '2024-09-05'),
(139, 'P001', '2024-09-01'),
(140, 'P002', '2024-09-01'),
(141, 'P003', '2024-09-02'),
(142, 'P004', '2024-09-02'),
(143, 'P005', '2024-09-03'),
(144, 'P006', '2024-09-03'),
(145, 'P007', '2024-09-04'),
(146, 'P008', '2024-09-04'),
(147, 'P009', '2024-09-05'),
(148, 'P010', '2024-09-05');


DELIMITER $$

CREATE PROCEDURE actualizar_producto_en_factura(
    IN p_id_factura INT,
    IN p_nuevo_id_producto VARCHAR(10)
)
BEGIN

    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    
    START TRANSACTION;

    -- Actualizamos el id_producto
    UPDATE pedidos
    SET id_producto = p_nuevo_id_producto
    WHERE id_factura = p_id_factura;

    COMMIT;

    SELECT 'Actualización realizada con éxito' AS mensaje;
END$$

DELIMITER ;

Simulaciones
Sesión 1 y Sesión 2: Realizaran actualizaciones simultáneas en diferentes conexiones para observar cómo el nivel de aislamiento READ UNCOMMITTED permite lecturas sucias.
CALL actualizar_producto_en_factura(41, 'P004');

CALL actualizar_producto_en_factura(42, 'P005');

Y en la sección 3:
SELECT * FROM pedidos;

La prueba de la simulación se encuentra en una imagen en la carpeta del taller.

...

4. INDICES -----------------------------------------------------------------------------------

Cree para todas las llaves foráneas de su modelo, un índice que cumpla con las características vistas en la clase anterior, según su criterio y  análisis.

Creo que los indices referentes a llaves foráneas son optimizadores de consultas ya que me plantee el caso de que por ejemplo se desea consultar todos los pedidos que se han hecho para un producto en particular, por ejemplo, el producto con id_producto = 'P001' (Pan de Chocolate). Para hacer esto, se necesita buscar en la tabla pedidos todos los registros donde id_producto sea igual a 'P001'.

Sin el índice en la columna id_producto, el motor  tendría que leer toda la tabla para encontrar las filas que coinciden con el id_producto y si la tabla pedidos tiene muchos registros, esto sería ineficiente y tomaría más tiempo.
estos serian los indices:

Tabla insumos
	CREATE INDEX idx_id_unidad ON insumos (id_unidad);
Tabla Recetas:
	CREATE INDEX idx_id_insumo ON recetas (id_insumo);
	CREATE INDEX idx_id_producto ON recetas (id_producto);
Tabla facturas_Venta:
	CREATE INDEX idx_id_cliente ON facturas_venta (id_cliente);
Tabla pedidos
	CREATE INDEX idx_id_factura ON pedidos (id_factura);
	CREATE INDEX idx_id_producto ON pedidos (id_producto);
	
No incluí indices en tres llaves (tipo_id, id_cliente y tipo_id_cliente) porque pueden no ser tan frecuentemente usadas para búsquedas específicas, por ende prioricé claves foráneas en tablas con mayor potencial de consultas filtradas, obtener, un insumo, receta o producto me parece que tiene recurrencia que obtener por ejemplo el tipo_id de un usuario.


5.
Cree un procedimiento almacenado que permita insertar, 100mil clientes nuevos, utilice si es preciso ciclos para que trabaje óptimamente.

Para este punto cree un csv utilizando python con la libreria "csv", para que la creación fuera automática y creará múltiples usuarios y los guardara en el archivo csv:
--------------------------------Código python----------------------------------
import csv
import os

# Ruta donde guardar el CSV
ruta_csv = os.path.expanduser('~/Documentos/DataBases/Actividad10Septiembre_Concurrencia_Indices/clientes.csv')

# Crear el archivo CSV con 100,000 registros
with open(ruta_csv, mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['id_cliente', 'tipo_id', 'nombres', 'apellidos', 'fecha_nacimiento'])

    # Generar 100,000 registros ficticios
    for i in range(1, 100001):
        id_cliente = f'C{i:05d}'
        tipo_id = 'CC' if i % 2 == 0 else 'TI'
        nombres = f'Nombre_{i}'
        apellidos = f'Apellido_{i}'
        fecha_nacimiento = '1990-01-01'
        writer.writerow([id_cliente, tipo_id, nombres, apellidos, fecha_nacimiento])

los guarda en esta ruta: ~/Documentos/DataBases/Actividad10Septiembre_Concurrencia_Indices/clientes.csv
--------------------------------------------------------------------------------


luego inserte todos los datos utilizando el csv:

LOAD DATA INFILE '~/Documentos/DataBases/Actividad10Septiembre_Concurrencia_Indices/clientes.csv'
INTO TABLE clientes
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS
(id_cliente, tipo_id, nombres, apellidos, fecha_nacimiento);

Aquí podemos ver un pequeño ejemplo del contenido de la tabla:

+------------------------------------------------------------------------------+
| C99957     | TI      | Nombre_99957  | Apellido_99957  | 1990-01-01 00:00:00 |
| C99958     | CC      | Nombre_99958  | Apellido_99958  | 1990-01-01 00:00:00 |
| C99959     | TI      | Nombre_99959  | Apellido_99959  | 1990-01-01 00:00:00 |
| C99960     | CC      | Nombre_99960  | Apellido_99960  | 1990-01-01 00:00:00 |
| C99961     | TI      | Nombre_99961  | Apellido_99961  | 1990-01-01 00:00:00 |
| C99962     | CC      | Nombre_99962  | Apellido_99962  | 1990-01-01 00:00:00 |
| C99963     | TI      | Nombre_99963  | Apellido_99963  | 1990-01-01 00:00:00 |
| C99964     | CC      | Nombre_99964  | Apellido_99964  | 1990-01-01 00:00:00 |
| C99965     | TI      | Nombre_99965  | Apellido_99965  | 1990-01-01 00:00:00 |
| C99966     | CC      | Nombre_99966  | Apellido_99966  | 1990-01-01 00:00:00 |
| C99967     | TI      | Nombre_99967  | Apellido_99967  | 1990-01-01 00:00:00 |
| C99968     | CC      | Nombre_99968  | Apellido_99968  | 1990-01-01 00:00:00 |
| C99969     | TI      | Nombre_99969  | Apellido_99969  | 1990-01-01 00:00:00 |
| C99970     | CC      | Nombre_99970  | Apellido_99970  | 1990-01-01 00:00:00 |
| C99971     | TI      | Nombre_99971  | Apellido_99971  | 1990-01-01 00:00:00 |
| C99972     | CC      | Nombre_99972  | Apellido_99972  | 1990-01-01 00:00:00 |
| C99973     | TI      | Nombre_99973  | Apellido_99973  | 1990-01-01 00:00:00 |
| C99974     | CC      | Nombre_99974  | Apellido_99974  | 1990-01-01 00:00:00 |
| C99975     | TI      | Nombre_99975  | Apellido_99975  | 1990-01-01 00:00:00 |
| C99976     | CC      | Nombre_99976  | Apellido_99976  | 1990-01-01 00:00:00 |
| C99977     | TI      | Nombre_99977  | Apellido_99977  | 1990-01-01 00:00:00 |
| C99978     | CC      | Nombre_99978  | Apellido_99978  | 1990-01-01 00:00:00 |
| C99979     | TI      | Nombre_99979  | Apellido_99979  | 1990-01-01 00:00:00 |
| C99980     | CC      | Nombre_99980  | Apellido_99980  | 1990-01-01 00:00:00 |
| C99981     | TI      | Nombre_99981  | Apellido_99981  | 1990-01-01 00:00:00 |
| C99982     | CC      | Nombre_99982  | Apellido_99982  | 1990-01-01 00:00:00 |
| C99983     | TI      | Nombre_99983  | Apellido_99983  | 1990-01-01 00:00:00 |
| C99984     | CC      | Nombre_99984  | Apellido_99984  | 1990-01-01 00:00:00 |
| C99985     | TI      | Nombre_99985  | Apellido_99985  | 1990-01-01 00:00:00 |
| C99986     | CC      | Nombre_99986  | Apellido_99986  | 1990-01-01 00:00:00 |
| C99987     | TI      | Nombre_99987  | Apellido_99987  | 1990-01-01 00:00:00 |
| C99988     | CC      | Nombre_99988  | Apellido_99988  | 1990-01-01 00:00:00 |
| C99989     | TI      | Nombre_99989  | Apellido_99989  | 1990-01-01 00:00:00 |
| C99990     | CC      | Nombre_99990  | Apellido_99990  | 1990-01-01 00:00:00 |
| C99991     | TI      | Nombre_99991  | Apellido_99991  | 1990-01-01 00:00:00 |
| C99992     | CC      | Nombre_99992  | Apellido_99992  | 1990-01-01 00:00:00 |
| C99993     | TI      | Nombre_99993  | Apellido_99993  | 1990-01-01 00:00:00 |
| C99994     | CC      | Nombre_99994  | Apellido_99994  | 1990-01-01 00:00:00 |
| C99995     | TI      | Nombre_99995  | Apellido_99995  | 1990-01-01 00:00:00 |
| C99996     | CC      | Nombre_99996  | Apellido_99996  | 1990-01-01 00:00:00 |
| C99997     | TI      | Nombre_99997  | Apellido_99997  | 1990-01-01 00:00:00 |
| C99998     | CC      | Nombre_99998  | Apellido_99998  | 1990-01-01 00:00:00 |
| C99999     | TI      | Nombre_99999  | Apellido_99999  | 1990-01-01 00:00:00 |
+------------+---------+---------------+-----------------+---------------------+



6.
Cree un procedimiento almacenado que permita actualizar los datos de un cliente su nombre y apellido.

DELIMITER //

CREATE PROCEDURE actualizar_cliente(
    IN p_id_cliente VARCHAR(255),
    IN p_nuevo_nombre VARCHAR(255),
    IN p_nuevo_apellido VARCHAR(255)
)
BEGIN
    UPDATE clientes
    SET nombres = p_nuevo_nombre,
        apellidos = p_nuevo_apellido
    WHERE id_cliente = p_id_cliente;
END //

DELIMITER ;

mysql> select * from clientes; 
+------------+---------+---------+------------+---------------------+
| id_cliente | tipo_id | nombres | apellidos  | fecha_nacimiento    |
+------------+---------+---------+------------+---------------------+
| C001       | CC      | Juan    | Pérez      | 1980-01-01 00:00:00 |
| C002       | CC      | María   | Gómez      | 1985-02-15 00:00:00 |
| C003       | CC      | Carlos  | Rodríguez  | 1990-03-10 00:00:00 |
| C004       | TI      | Ana     | Martínez   | 2000-04-20 00:00:00 |
| C005       | TI      | Luis    | Fernández  | 1995-05-25 00:00:00 |
| C006       | CC      | Jorge   | López      | 1982-06-30 00:00:00 |
| C007       | CC      | Pedro   | Díaz       | 1975-07-10 00:00:00 |
| C008       | CC      | Laura   | Hernández  | 1992-08-08 00:00:00 |
| C009       | CC      | Marta   | Jiménez    | 1988-09-12 00:00:00 |
| C010       | TI      | Sofía   | García     | 1999-10-05 00:00:00 |
+------------+---------+---------+------------+---------------------+
10 rows in set (0,01 sec)

Ejemplo:
CALL actualizar_cliente('C001', 'Cristian', 'Franco');

Ahora: 
mysql> select * from clientes; 
+------------+---------+----------+------------+---------------------+
| id_cliente | tipo_id | nombres  | apellidos  | fecha_nacimiento    |
+------------+---------+----------+------------+---------------------+
| C001       | CC      | Cristian | Franco     | 1980-01-01 00:00:00 |  <!----
| C002       | CC      | María    | Gómez      | 1985-02-15 00:00:00 |
| C003       | CC      | Carlos   | Rodríguez  | 1990-03-10 00:00:00 |
| C004       | TI      | Ana      | Martínez   | 2000-04-20 00:00:00 |
| C005       | TI      | Luis     | Fernández  | 1995-05-25 00:00:00 |
| C006       | CC      | Jorge    | López      | 1982-06-30 00:00:00 |
| C007       | CC      | Pedro    | Díaz       | 1975-07-10 00:00:00 |
| C008       | CC      | Laura    | Hernández  | 1992-08-08 00:00:00 |
| C009       | CC      | Marta    | Jiménez    | 1988-09-12 00:00:00 |
| C010       | TI      | Sofía    | García     | 1999-10-05 00:00:00 |
+------------+---------+----------+------------+---------------------+
10 rows in set (0,00 sec)


7.
Cree un procedimiento almacenado que permita eliminar 1 o varios clientes, por su id de identificación.

DELIMITER //

CREATE PROCEDURE eliminar_cliente(
    IN p_id_cliente VARCHAR(255)
)
BEGIN
    DELETE FROM clientes
    WHERE id_cliente = p_id_cliente;
END //

DELIMITER ;

CALL eliminar_cliente('C004');

mysql> select * from clientes; 
+------------+---------+----------+------------+---------------------+
| id_cliente | tipo_id | nombres  | apellidos  | fecha_nacimiento    |
+------------+---------+----------+------------+---------------------+
| C001       | CC      | Cristian | Franco     | 1980-01-01 00:00:00 |
| C002       | CC      | María    | Gómez      | 1985-02-15 00:00:00 |
| C003       | CC      | Carlos   | Rodríguez  | 1990-03-10 00:00:00 |
| C005       | TI      | Luis     | Fernández  | 1995-05-25 00:00:00 |  No hay 'C004'
| C006       | CC      | Jorge    | López      | 1982-06-30 00:00:00 |
| C007       | CC      | Pedro    | Díaz       | 1975-07-10 00:00:00 |
| C008       | CC      | Laura    | Hernández  | 1992-08-08 00:00:00 |
| C009       | CC      | Marta    | Jiménez    | 1988-09-12 00:00:00 |
| C010       | TI      | Sofía    | García     | 1999-10-05 00:00:00 |
+------------+---------+----------+------------+---------------------+
9 rows in set (0,00 sec)



